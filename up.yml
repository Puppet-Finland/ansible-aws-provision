---
- name: Create an EC2 instance in AWS
  hosts: localhost
  gather_facts: yes
  vars_files:
    - ../aap-project.yml
    - ../aap-site.yml

  tasks:
    - name: Validate project variable p
      block:
        - name: Fail if no project name is defined
          ansible.builtin.assert:
            that:
              - p is string
      rescue:
        - name: Display error message
          ansible.builtin.fail:
            msg: "ERROR: project must be defined with -e p=<project>"

    - name: Validate that project exits in vars file
      block:
        - name: Construct new variable from the selected project dictionary
          ansible.builtin.set_fact:
            project: "{{ lookup('ansible.builtin.vars', p, errors='strict') }}"
      rescue:
        - name: Display error message
          ansible.builtin.fail:
            msg: "ERROR: project {{ p }} does not exist in variable file!"

    - name: Construct instance name
      ansible.builtin.set_fact:
        my_instance_name: "{{ project.instance_name }}-{{ ansible_user_id }}"

    - name: Show constructed instance name
      ansible.builtin.debug:
        var: my_instance_name

    - name: Create EC2 instance
      amazon.aws.ec2_instance:
        state: present
        name: "{{ my_instance_name }}"
        key_name: "{{ keypair_name }}"
        vpc_subnet_id: "{{ subnet_id }}"
        instance_type: "{{ project.instance_type }}"
        security_groups: "{{ security_group_ids }}"
        network:
          assign_public_ip: true
        image_id: "{{ project.ami_id }}"
        tags:
          tostop: true
          Environment: Testing
      register: ec2_info

    - name: Create EC2 instance ID fact
      ansible.builtin.set_fact:
        instance_id: "{{ ec2_info.instances[0].instance_id }}"

    - name: Add new EC2 instance to inventory
      ansible.builtin.add_host:
        name: "{{ my_instance_name }}"
        ansible_user: "{{ project.login_user }}"
        ansible_ssh_host: "{{ ec2_info.instances[0].public_ip_address }}"
        ansible_ssh_private_key_file: "~/.ssh/openvpn-foss-opentofu"

    -  name: Wait for port 22 to become open and contain "OpenSSH"
       ansible.builtin.wait_for:
         port: 22
         host: "{{ ec2_info.instances[0].public_ip_address }}"
         search_regex: OpenSSH
         delay: 10
       connection: local

- name: Provision EC2 instance
  hosts: "{{ hostvars['localhost'].my_instance_name }}"
  become: true
  gather_facts: yes
  vars_files:
    - ../aap-project.yml
    - ../aap-site.yml

  tasks:
    - name: Show inventory hostname
      ansible.builtin.debug:
        msg: "{{ inventory_hostname }}"

    - name: Construct new variable from the selected project dictionary
      ansible.builtin.set_fact:
        project: "{{ lookup('ansible.builtin.vars', p, errors='strict') }}"

    - name: Attempt provisioning
      block:
        - name: Provision files
          ansible.builtin.copy:
            src: "{{ item.key }}"
            dest: "{{ item.value }}"
            mode: preserve
          loop: "{{ project.files | dict2items }}"

        - name: Run provisioning scripts
          ansible.builtin.shell:
            cmd: "{{ item }}"
          loop: "{{ project.commands }}"

        - name: Mark provisioning as successful
          ansible.builtin.set_fact:
            provisioning_failed: false

      rescue:
        - name: Mark provisioning as failed
          ansible.builtin.set_fact:
            provisioning_failed: true

- name: Create an EC2 instance in AWS
  hosts: localhost
  gather_facts: yes
  vars_files:
    - ../aap-project.yml
    - ../aap-site.yml

  tasks:
    - name: Remove EC2 instance
      amazon.aws.ec2_instance:
        state: absent
        wait: false
        filters:
          instance-id: "{{ hostvars['localhost'].instance_id }}"
          instance-state-name: running
          "tag:Name": "{{ hostvars['localhost'].my_instance_name }}"
          "tag:tostop": "true"
      when: hostvars[my_instance_name].provisioning_failed == true
